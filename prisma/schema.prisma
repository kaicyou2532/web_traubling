generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model User {
  id            String          @id @default(cuid())
  name          String?         @map("name")
  email         String          @unique
  emailVerified DateTime?       @map("emailVerified") 
  image         String?
  createdAt     DateTime        @default(now()) 
  updatedAt     DateTime        @updatedAt 
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  Authenticator Authenticator[]
}

model Post {
  id          Int      @id @default(autoincrement())
  countryId   Int      @map("countryId") @default(10000)
  cityId      Int      @map("cityId") @default(100)
  troubleId   Int      @map("troubleId")
  travelMonth Int      @map("travelMonth")
  travelYear  Int      @map("travelYear")
  title       String
  content     String
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
  userId      String   @map("userId")
  likeCount   Int      @default(0) @map("likeCount")

  user     User      @relation(fields: [userId], references: [id])
  country  Country   @relation(fields: [countryId], references: [id])
  city     City     @relation(fields: [cityId], references: [id])
  trouble  Trouble   @relation(fields: [troubleId], references: [id])
  comments Comment[]
}

model Country {
  id     Int    @id @default(autoincrement())
  enName String @map("enName")
  jaName String @map("jaName")
  posts  Post[]
  cities City[]
}

model City {
  id        Int     @id @default(autoincrement())
  enName    String  @map("enName")
  jaName    String  @map("jaName")
  countryId Int     @map("countryId") @default(10000)
  photoUrl  String?  @map("photoUrl")
  country   Country @relation(fields: [countryId], references: [id])
  posts     Post[]
}

model Trouble {
  id     Int    @id @default(autoincrement())
  enName String @map("enName")
  jaName String @map("jaName")
  posts  Post[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  postId  Int    @map("postId")
  post    Post   @relation(fields: [postId], references: [id])
}

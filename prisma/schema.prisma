generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  User                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model City {
  id        Int     @id @default(autoincrement())
  enName    String
  jaName    String
  countryId Int     @default(10000)
  photoUrl  String?
  Country   Country @relation(fields: [countryId], references: [id])
  Post      Post[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  userId    String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Country {
  id     Int    @id @default(autoincrement())
  enName String
  jaName String
  City   City[]
  Post   Post[]
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String   @map("followerId")
  followingId String   @map("followingId")
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Notification {
  id         Int              @id @default(autoincrement())
  userId     String           @map("userId")
  type       NotificationType
  message    String
  isRead     Boolean          @default(false) @map("isRead")
  createdAt  DateTime         @default(now()) @map("createdAt")
  postId     Int?             @map("postId")
  fromUserId String?          @map("fromUserId")
  fromUser   User?            @relation("NotificationFromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  post       Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
}

model Post {
  id           Int            @id @default(autoincrement())
  countryId    Int            @default(10000) @map("countryId")
  troubleId    Int            @map("troubleId")
  title        String
  content      String
  createdAt    DateTime       @default(now()) @map("createdAt")
  updatedAt    DateTime       @updatedAt @map("updatedAt")
  userId       String         @map("userId")
  travelMonth  Int            @map("travelMonth")
  travelYear   Int            @map("travelYear")
  cityId       Int            @default(100) @map("cityId")
  likeCount    Int            @default(0) @map("likeCount")
  latitude     Float?
  longitude    Float?
  Comment      Comment[]
  Like         Like[]
  Notification Notification[]
  City         City           @relation(fields: [cityId], references: [id])
  Country      Country        @relation(fields: [countryId], references: [id])
  Trouble      Trouble        @relation(fields: [troubleId], references: [id])
  User         User           @relation(fields: [userId], references: [id])
}

model Profile {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  userId    String    @unique
  bio       String?
  avatarUrl String?
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @db.Timestamp(6)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trouble {
  id     Int    @id @default(autoincrement())
  enName String
  jaName String
  Post   Post[]
}

model User {
  id                String          @id @default(cuid())
  name              String?         @map("name")
  email             String          @unique
  emailVerified     DateTime?       @map("emailVerified")
  image             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  profile           String?
  accounts          Account[]
  Authenticator     Authenticator[]
  comments          Comment[]
  followers         Follow[]        @relation("UserFollowers")
  following         Follow[]        @relation("UserFollowing")
  likes             Like[]
  sentNotifications Notification[]  @relation("NotificationFromUser")
  notifications     Notification[]
  posts             Post[]
  Profile           Profile?
  sessions          Session[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

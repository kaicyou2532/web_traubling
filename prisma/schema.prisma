generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String  @map("userId")
  type              String
  provider          String
  providerAccountId String  @map("providerAccountId")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt         DateTime @default(now()) @db.Timestamp(6) @map("updated_at")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, providerAccountId])
  @@map("Account")
}

model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("userId")
  providerAccountId    String  @map("providerAcountId")
  credentialPublicKey  String  @map("credentialPublicKey")
  counter              Int
  credentialDeviceType String  @map("credentialDeviceType")
  credentialBackedUp   Boolean @map("credentialBackedUp")
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, credentialID])
  @@map("Authenticator")
}

model Session {
  sessionToken String   @id @map("session_token")
  userId       String   @map("userId")
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt    DateTime @default(now()) @db.Timestamp(6) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("Session")
}

model User {
  id            String  @id @default(dbgenerated("gen_random_uuid()"))
  name        String  @map("name")
  email         String  @unique
  emailVerified DateTime? @db.Timestamp(6) @map("emailVerified")
  image         String?
  createdAt     DateTime @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt     DateTime @default(now()) @db.Timestamp(6) @map("updated_at")
  Account       Account[]
  Authenticator Authenticator[]
  Session       Session[]
  Post          Post[]

  @@map("User")
}

model Post {
  id          Int      @id @default(autoincrement())
  countryId   Int      @map("countryId")
  cityId      Int      @map("cityId") @default(100)
  troubleId   Int      @map("troubleId")
  travelMonth Int      @map("travelMonth")
  travelYear  Int      @map("travelYear")
  title       String
  content     String
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
  userId      String   @map("userId")
  isDraft     Boolean  @map("isDraft")

  user    User    @relation(fields: [userId], references: [id])
  country Country @relation(fields: [countryId], references: [id])
  city    City    @relation(fields: [cityId], references: [id])
  trouble Trouble @relation(fields: [troubleId], references: [id])
  comments Comment[]

  @@map("Post")  
}
model Country {
  id     Int    @id @default(autoincrement())
  enName String @map("enName")
  jaName String @map("jaName")
  posts  Post[]
  cities City[] @relation("CountryToCity")

  @@map("Country")
}

model City {
  id        Int     @id @default(autoincrement())
  enName    String  @map("enName")
  jaName    String  @map("jaName")
  CountryId Int     @map("CountryId")
  Photourl  String  @map("Photourl")
  country   Country @relation("CountryToCity", fields: [CountryId], references: [id])
  Posts Post[]

  @@map("City")
}

model Trouble {
  id     Int    @id @default(autoincrement())
  enName String @map("enName")
  jaName String @map("jaName")

  posts  Post[]

  @@map("Trouble")
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  postId  Int    @map("postId")
  post    Post   @relation(fields: [postId], references: [id])

  @@map("Comment")
}

